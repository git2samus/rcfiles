# vim: set filetype=sh :

mcd() {
    mkdir -p "$1" && cd "$1"
}; export -f mcd
rcd() {
    rmdir "$PWD" && cd ..
}; export -f rcd

exit_error() {
    local errcode=${2:-$?}
    echo "$1" >&2
    exit "$errcode"
}; export -f exit_error

# check if first argument appears among the rest
# for use with arrays, like: in_array "$var" "${arr[@]}"
in_array() {
    local needle=${1:?missing needle}; shift
    for arg; do
        [[ $arg = $needle ]] && return
    done; return 1
}; export -f in_array

# test for glob existance (use with literals, like: exists '*')
exists() (
    shopt -s nullglob dotglob; shopt -u failglob
    a=($1); [[ ${a##*/} != . && ${a##*/} != .. && -e $a ]] && return
); export -f exists

# in-place file redirection
with() {
    local input=$1 output; shift
    if [[ -r $input ]]; then
        echo "cannot read from input file" >&2
        return 1
    fi

    output=$(mktemp)
    "$@" <"$input" >"$output" && mv "$output" "$input"
}; export -f with

within() (
    cd "$1" && shift && "$@"
); export -f within

retry() {
    local delay=1 n

    if ! [[ $1 = *[^0-9]* ]]; then
        # TODO allow delay=0 (prevents Ctrl-C)
        if (($1 > 0)); then
            delay=${1:1}
        fi
        shift
    fi

    # run command
    while ! "$@"; do
        echo "retrying in ${delay}s"
        for ((n=delay; n>0; n--)); do
            sleep 1 || return
        done
    done
}; export -f retry

chain() {
    local prefix=("$@")
    local cmd raw_cmd raw_cmds=()

    # you're not allowed to do this... but I do.
    while read -r raw_cmd; do
        raw_cmds+=("$raw_cmd")
    done && for raw_cmd in "${raw_cmds[@]}"; do
        eval "cmd=($raw_cmd)" && "${prefix[@]}" "${cmd[@]}" || break # cookies...
    done
}; export -f chain

mklab() {
    # creates small test environments for scripting
    local d=$(mktemp -d) && cd "$d" || return 1
    clear; bash --login --noprofile --norc
    cd - && rm -r "$d"
}; export -f mklab

list_join() {
    local OLDIFS=$IFS
    IFS=${1:?"Missing separator"}
    echo "${*:2}"
    IFS=$OLDIFS
}; export -f list_join
# shortcuts (newline-join, colon-join)
nl_join() {
    list_join $'\n' "$@"
}; export -f nl_join

cl_join() {
    list_join : "$@"
}; export -f cl_join

rfind() {
    # reverse find
    local target="$1" cwd="$PWD"

    [[ "$target" ]] || { echo "ERROR: missing target" >&2; return 1; }

    while true; do
        if [[ -e "$cwd"/"$target" ]]; then
            echo "$cwd"/"$target"
            return 0
        fi
        if [[ "$cwd" ]]; then
            cwd="${cwd%/*}"
        else
            break
        fi
    done
    return 1
}; export -f rfind

filter_uniq() {
    awk '!a[$0]++' "$@"
}; export -f filter_uniq

hvim() {
    local h=$1; shift
    vim -c ":h $h | bd1 | normal zt" "$@"
}; export -f hvim

svim() {
    local parent session branch a target
    if [[ $1 = git ]]; then
        shift
        branch=$(git rev-parse --abbrev-ref HEAD)
    fi

    parent=${PWD%/*}
    session=${PWD##*/}_${parent##*/}${branch:+:$branch}

    if [[ $1 = ++ ]]; then
        shift
        # TODO allow to run in a different dir other than .
        target=.
        a=(); while IFS= read -r -d '' file; do
            a+=("$file")
        done < <(find "$target" -type f \( -empty -o -exec fgrep -qI '' {} \; \) -print0 | sort -z)
        vim -c "chdir $target | $(printf 'SessionSaveAs %q' "$session")" "$@" -- "${a[@]}"
    elif [[ $1 = + ]]; then
        shift
        vim -c "$(printf 'SessionSaveAs %q' "$session")" "$@"
    else
        vim -c "$(printf 'SessionOpen %q' "$session")" "$@"
    fi
}; export -f svim

git_track() {
    local remote=${1:?'missing remote'} branch=${2:?'missing branch'}
    if [[ $3 ]]; then local git_args=(config -f "$3"); else local git_args=(config); fi
    git "${git_args[@]}" "branch.$branch.remote" "$remote" && git "${git_args[@]}" "branch.$branch.merge" "refs/heads/$branch"
    echo "[$branch]"; while read var val; do echo "${var#branch.$branch.}=$val"; done < <(git "${git_args[@]}" --get-regexp "^branch\\.$branch\\.")
}; export -f git_track

mkscreen() {
    screen -S "$1" "$@"
}; export -f mkscreen

rscreen() {
    if (($#)); then
        screen -r "$@"
    else
        screen -list
    fi
}; export -f rscreen

# stupid wrapper for stupid debian-like systems
if hash apt-get >/dev/null 2>&1; then
    apt() {
        local sed_expr='/Commands:/,/^$/{//d;s/^ *\([^ ]\+\).*/\1/p;}'
        local get_cmds=($(apt-get | sed -n "$sed_expr")) cache_cmds=($(apt-cache | sed -n "$sed_expr"))
        local cmd=$1; shift

        for get_cmd in "${get_cmds[@]}"; do
            if [[ $cmd = $get_cmd ]]; then
                sudo apt-get "$cmd" "$@"; return
            fi
        done

        for cache_cmd in "${cache_cmds[@]}"; do
            if [[ $cmd = $cache_cmd ]]; then
                apt-cache "$cmd" "$@"; return
            fi
        done

        echo "Unknown command: $cmd"
        echo
        echo "Commands (apt-get):"
        printf "   %s\n" "${get_cmds[@]}"
        echo
        echo "Commands (apt-cache):"
        printf "   %s\n" "${cache_cmds[@]}"

        return 1
    }; export -f apt
fi

jobs_prompt() {
    local a running_jobs stopped_jobs
    a=($(jobs -pr)); [[ $a ]] && running_jobs=${#a[@]}
    a=($(jobs -ps)); [[ $a ]] && stopped_jobs=${#a[@]}
    if [[ $running_jobs || $stopped_jobs ]]; then
        if [[ $running_jobs && $stopped_jobs ]]; then a=+; else a=; fi
        echo "(${running_jobs:+${running_jobs}r}$a${stopped_jobs:+${stopped_jobs}s})& "
    fi
}; export -f jobs_prompt

git_repl() {
    while IFS= read -rep "git$(__git_ps1)> " line; do
        if [[ $line = \!* ]]; then
            line=${line#\!}
        elif [[ $line != git\ * ]]; then
            line="git $line"
        fi
        eval "$line";
        history -s "$line";
    done
}; export -f git_repl

wget_mirror() {
    wget --timestamping --recursive --level=inf --no-parent --page-requisites --convert-links --backup-converted "$@"
}; export -f wget_mirror
wget_mirror_no_robots() {
    wget_mirror -e robots=off "$@"
}; export -f wget_mirror_no_robots

wget_fullpage() {
    wget --page-requisites --span-hosts --convert-links "$@"
}; export -f wget_fullpage
wget_fullpage_no_robots() {
    wget_fullpage -e robots=off "$@"
}; export -f wget_fullpage_no_robots

gitignore() (
    gi_args=(); for arg; do
        if [[ $arg = -- ]]; then
            curl_args=("${gi_args[@]}")
            gi_args=()
        else
            gi_args+=("$arg")
        fi
    done
    IFS=,; curl "${curl_args[@]}" http://gitignore.io/api/"${gi_args[*]}"
); export -f gitignore

[[ -e ~/.functionrc_local ]] && . ~/.functionrc_local

